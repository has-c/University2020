View(df)
#compute total evidence
naive_bayes_classification = data.frame()
for (idx in 1:nrow(word.df)){
message = word.df[idx, ]
words = df[idx, ]
total_ei = as.numeric(message) %*% as.numeric(common_word_occurance$ei)
naive_bayes_classification = rbind(naive_bayes_classification, c(words, data.frame(total_ei = c(total_ei))))
}
#compute total evidence
naive_bayes_classification = data.frame()
for (idx in 1:nrow(word.df)){
message = word.df[idx, ]
words = df[idx, ]
total_ei = as.numeric(message) %*% as.numeric(common_word_occurance$ei)
naive_bayes_classification = rbind(naive_bayes_classification, c(words, data.frame(total_ei = c(total_ei))))
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rpart)
set.seed(369)
load("spam.rda")
#create feature-label df
word.df = data.frame(wordmatrix)
col.names = make.names(names(word.df))
names(word.df) = col.names
spam.df = cbind(word.df, df['is_spam'])
spam.tree = rpart(factor(is_spam) ~. , data=spam.df)
#plot cp to see if pruning is needed
plotcp(spam.tree)
printcp(spam.tree)
#prune tree
spam.tree.pruned = prune(spam.tree, cp=0.021)
#plot pruned tree
plot(spam.tree.pruned)
#confusion matrix
y_pred_prob = predict(spam.tree.pruned)
max_idx <- apply(y_pred_prob, 1, which.max)
y_pred = colnames(y_pred_prob)[max_idx]
conf_matrix = with(spam.df, table(actual=is_spam, predicted=y_pred))
conf_matrix
#Find Yi and Ni for calculating word occurrences
common_word_occurance = data.frame()
not_spam_entries.df = word.df[spam.df$is_spam == FALSE, ]
spam_entries.df = word.df[spam.df$is_spam == TRUE, ]
common_words_fixed = names(word.df)
for (word in common_words_fixed){
ni = sum(not_spam_entries.df[, word])
yi = sum(spam_entries.df[, word])
ei = log(yi + 1) - log(ni + 1) #evidence
row = c(word, yi, ni, ei)
common_word_occurance = rbind(common_word_occurance, row)
}
names(common_word_occurance) = c("word", "yi", "ni", "ei")
head(common_word_occurance)
#compute total evidence
naive_bayes_classification = data.frame()
for (idx in 1:nrow(word.df)){
message = word.df[idx, ]
words = df[idx, ]
total_ei = as.numeric(message) %*% as.numeric(common_word_occurance$ei)
naive_bayes_classification = rbind(naive_bayes_classification, c(words, data.frame(total_ei = c(total_ei))))
}
#compute total evidence
naive_bayes_classification = data.frame()
for (idx in 1:nrow(word.df)){
message = word.df[idx, ]
words = df$words[idx, ]
total_ei = as.numeric(message) %*% as.numeric(common_word_occurance$ei)
naive_bayes_classification = rbind(naive_bayes_classification, c(words, data.frame(total_ei = c(total_ei))))
}
df$words[idx, ]
df$words[idx]
#compute total evidence
naive_bayes_classification = data.frame()
for (idx in 1:nrow(word.df)){
message = word.df[idx, ]
words = df$words[idx]
total_ei = as.numeric(message) %*% as.numeric(common_word_occurance$ei)
naive_bayes_classification = rbind(naive_bayes_classification, c(words, data.frame(total_ei = c(total_ei))))
}
words = df$words[idx]
words
View(df)
View(df)
#compute total evidence
naive_bayes_classification = data.frame()
for (idx in 1:nrow(word.df)){
message = word.df[idx, ]
total_ei = as.numeric(message) %*% as.numeric(common_word_occurance$ei)
naive_bayes_classification = rbind(naive_bayes_classification, c(idx, data.frame(total_ei = c(total_ei))))
}
#compute total evidence
naive_bayes_classification = data.frame()
for (idx in 1:nrow(word.df)){
message = word.df[idx, ]
total_ei = as.numeric(message) %*% as.numeric(common_word_occurance$ei)
naive_bayes_classification = rbind(naive_bayes_classification, c(message, data.frame(total_ei = c(total_ei))))
}
#compute total evidence
naive_bayes_classification = data.frame()
for (idx in 1:nrow(word.df)){
message = word.df[idx, ]
total_ei = as.numeric(message) %*% as.numeric(common_word_occurance$ei)
naive_bayes_classification = rbind(naive_bayes_classification, c(idx, data.frame(total_ei = c(total_ei))))
}
#compute total evidence
naive_bayes_classification = data.frame()
for (idx in 1:nrow(word.df)){
message = word.df[idx, ]
total_ei = as.numeric(message) %*% as.numeric(common_word_occurance$ei)
naive_bayes_classification = rbind(naive_bayes_classification, data.frame(message_id = idx,
total_ei = c(total_ei)))
}
head(naive_bayes_classification)
#compute total evidence
naive_bayes_classification = data.frame()
for (idx in 1:nrow(word.df)){
message = word.df[idx, ]
words = df$words[idx]
total_ei = as.numeric(message) %*% as.numeric(common_word_occurance$ei)
naive_bayes_classification = rbind(naive_bayes_classification, data.frame(words = words,
total_ei = c(total_ei)))
}
#compute total evidence
naive_bayes_classification = data.frame()
for (idx in 1:nrow(word.df)){
message = word.df[idx, ]
total_ei = as.numeric(message) %*% as.numeric(common_word_occurance$ei)
naive_bayes_classification = rbind(naive_bayes_classification, data.frame(message_id = idx,
total_ei = c(total_ei)))
}
head(naive_bayes_classification)
spam.tree = rpart(factor(is_spam) ~. , data=spam.df)
#plot cp to see if pruning is needed
plotcp(spam.tree)
printcp(spam.tree)
#prune tree
spam.tree.pruned = prune(spam.tree, cp=0.021)
#plot pruned tree
plot(spam.tree.pruned);text(spam.tree.pruned)
spam.tree = rpart(factor(is_spam) ~. , data=spam.df)
#plot cp to see if pruning is needed
plotcp(spam.tree)
printcp(spam.tree)
#prune tree
spam.tree.pruned = prune(spam.tree, cp=0.021)
#plot pruned tree
plot(spam.tree.pruned)
install.packages('xgboost')
knitr::opts_chunk$set(echo = TRUE)
library(xgboost)
data(agaricus.train, package='xgboost')
data(agaricus.test, package='xgboost')
bst <- xgboost(data = agaricus.train$data, label = agaricus.train$label,
max_depth = 2, eta = 1, nthread = 2, nrounds = 2,
objective = "binary:logistic")
pred <- predict(bst, agaricus.test$data)
pred
pred <- predict(bst, agaricus.test$data)
help(xgboost)
xgb.plot.tree(bst)
xgb.plot.tree(feature_names = colnames(agaricus.train$data), model = bst)
install.packages('DiagrammeR')
xgb.plot.tree(feature_names = colnames(agaricus.train$data), model = bst)
data(agaricus.train, package='xgboost')
data(agaricus.test, package='xgboost')
bst <- xgboost(data = agaricus.train$data, label = agaricus.train$label,
max_depth = 2, eta = 1, nthread = 2, nrounds = 2,
objective = "binary:logistic")
View(agaricus.train)
View(agaricus.train)
agaricus.train$data
agaricus.train$label
unique(agaricus.train$label)
xgb.cv(data = agaricus.train$data, label = agaricus.train$label, num_class=2, nfold=10)
xgb.cv(data = agaricus.train$data, label = agaricus.train$label, num_class=2, nfold=10, nrounds=30)
xgb.cv(data = agaricus.train$data, label = agaricus.train$label, num_class=2, nfold=10, nrounds=15)
xgb.cv(data = agaricus.train$data, label = agaricus.train$label, num_class=2, nfold=10, nrounds=15)
adjusted_bst <- xgboost(data = agaricus.train$data, label = agaricus.train$label,
nthread = 2, nrounds = 10,
objective = "binary:logistic")
xgb.plot.tree(feature_names = colnames(agaricus.train$data), model = adjusted_bst)
adjusted_bst <- xgboost(data = agaricus.train$data, label = agaricus.train$label,
nthread = 2, nrounds = 10,
objective = "binary:logistic")
xgb.plot.tree(feature_names = colnames(agaricus.train$data), model = adjusted_bst)
adjp_pred = predict(adjusted_bst, agaricus.test$data)
pred
pred <- predict(bst, agaricus.test$data)
pred
View(agaricus.train)
View(agaricus.train)
pred <- predict(bst, agaricus.test$data)
pred[pred<0.5] = 0
pred[pred>0.5] = 1
pred <- predict(bst, agaricus.test$data)
pred[pred<0.5] = 0
pred[pred>0.5] = 1
acc = sum(pred == agaricus.test$label)/length(pred)
adjusted_bst <- xgboost(data = agaricus.train$data, label = agaricus.train$label,
nthread = 2, nrounds = 10,
objective = "binary:logistic")
xgb.plot.tree(feature_names = colnames(agaricus.train$data), model = adjusted_bst)
adj_pred = predict(adjusted_bst, agaricus.test$data)
adj_pred[adj_pred<0.5] = 0
adj_pred[adj_pred>0.5] = 1
acc = sum(adj_pred == agaricus.test$label)/length(adj_pred)
adjusted_bst <- xgboost(data = agaricus.train$data, label = agaricus.train$label,
nthread = 2, nrounds = 10,
objective = "binary:logistic")
xgb.plot.tree(feature_names = colnames(agaricus.train$data), model = adjusted_bst)
adj_pred = predict(adjusted_bst, agaricus.test$data)
adj_pred[adj_pred<0.5] = 0
adj_pred[adj_pred>0.5] = 1
adj_acc = sum(adj_pred == agaricus.test$label)/length(adj_pred)
pred <- predict(bst, agaricus.test$data)
pred[pred<0.5] = 0
pred[pred>0.5] = 1
acc = sum(pred == agaricus.test$label)/length(pred)
dimnames(agaricus.train$data)[[2]]
agaricus.train$data
dim(agaricus.train)
shape(agaricus.train)
ndim(agaricus.train)
size(agaricus.train)
length(agaricus.train)
dim(agaricus.train$data)
knitr::opts_chunk$set(echo = TRUE)
library(xgboost)
adjusted_bst <- xgboost(data = agaricus.train$data, label = agaricus.train$label,
max_depth = 2, eta = 1,nthread = 2, nrounds = 10,
objective = "binary:logistic")
knitr::opts_chunk$set(echo = TRUE)
library(xgboost)
data(agaricus.train, package='xgboost')
data(agaricus.test, package='xgboost')
bst <- xgboost(data = agaricus.train$data, label = agaricus.train$label,
max_depth = 2, eta = 1, nthread = 2, nrounds = 2,
objective = "binary:logistic")
pred <- predict(bst, agaricus.test$data)
pred[pred<0.5] = 0
pred[pred>0.5] = 1
acc = sum(pred == agaricus.test$label)/length(pred)
xgb.plot.tree(feature_names = colnames(agaricus.train$data), model = bst)
xgb.cv(data = agaricus.train$data, label = agaricus.train$label, num_class=2, nfold=10, nrounds=15)
adjusted_bst <- xgboost(data = agaricus.train$data, label = agaricus.train$label,
max_depth = 2, eta = 1,nthread = 2, nrounds = 10,
objective = "binary:logistic")
xgb.plot.tree(feature_names = colnames(agaricus.train$data), model = adjusted_bst)
adj_pred = predict(adjusted_bst, agaricus.test$data)
adj_pred[adj_pred<0.5] = 0
adj_pred[adj_pred>0.5] = 1
adj_acc = sum(adj_pred == agaricus.test$label)/length(adj_pred)
adjusted_bst <- xgboost(data = agaricus.train$data, label = agaricus.train$label,
nthread = 2, nrounds = 10,
objective = "binary:logistic")
xgb.plot.tree(feature_names = colnames(agaricus.train$data), model = adjusted_bst)
adj_pred = predict(adjusted_bst, agaricus.test$data)
adj_pred[adj_pred<0.5] = 0
adj_pred[adj_pred>0.5] = 1
adj_acc = sum(adj_pred == agaricus.test$label)/length(adj_pred)
adjusted_bst <- xgboost(data = agaricus.train$data, label = agaricus.train$label,
max_depth = 2, eta = 1,nthread = 2, nrounds = 10,
objective = "binary:logistic")
xgb.plot.tree(feature_names = colnames(agaricus.train$data), model = adjusted_bst)
adj_pred = predict(adjusted_bst, agaricus.test$data)
adj_pred[adj_pred<0.5] = 0
adj_pred[adj_pred>0.5] = 1
adj_acc = sum(adj_pred == agaricus.test$label)/length(adj_pred)
adjusted_bst <- xgboost(data = agaricus.train$data, label = agaricus.train$label,
nthread = 2, nrounds = 10,
objective = "binary:logistic")
xgb.plot.tree(feature_names = colnames(agaricus.train$data), model = adjusted_bst)
adj_pred = predict(adjusted_bst, agaricus.test$data)
adj_pred[adj_pred<0.5] = 0
adj_pred[adj_pred>0.5] = 1
adj_acc = sum(adj_pred == agaricus.test$label)/length(adj_pred)
knitr::opts_chunk$set(echo = TRUE)
library(xgboost)
data(agaricus.train, package='xgboost')
data(agaricus.test, package='xgboost')
bst <- xgboost(data = agaricus.train$data, label = agaricus.train$label,
max_depth = 2, eta = 1, nthread = 2, nrounds = 2,
objective = "binary:logistic")
pred <- predict(bst, agaricus.test$data)
pred[pred<0.5] = 0
pred[pred>0.5] = 1
acc = sum(pred == agaricus.test$label)/length(pred)
xgb.plot.tree(feature_names = colnames(agaricus.train$data), model = bst)
xgb.cv(data = agaricus.train$data, label = agaricus.train$label, num_class=2, nfold=10, nrounds=15)
adjusted_bst <- xgboost(data = agaricus.train$data, label = agaricus.train$label,
max_depth = 2, eta = 1,nthread = 2, nrounds = 10,
objective = "binary:logistic")
xgb.plot.tree(feature_names = colnames(agaricus.train$data), model = adjusted_bst)
adj_pred = predict(adjusted_bst, agaricus.test$data)
adj_pred[adj_pred<0.5] = 0
adj_pred[adj_pred>0.5] = 1
adj_acc = sum(adj_pred == agaricus.test$label)/length(adj_pred)
adjusted_bst <- xgboost(data = agaricus.train$data, label = agaricus.train$label,
nthread = 2, nrounds = 10,
objective = "binary:logistic")
xgb.plot.tree(feature_names = colnames(agaricus.train$data), model = adjusted_bst)
adj_pred = predict(adjusted_bst, agaricus.test$data)
adj_pred[adj_pred<0.5] = 0
adj_pred[adj_pred>0.5] = 1
adj_acc = sum(adj_pred == agaricus.test$label)/length(adj_pred)
mushroom.df <- read_csv("mushroom.test")
knitr::opts_chunk$set(echo = TRUE)
library(xgboost)
library(tidyverse)
mushroom.df <- read_csv("mushroom.test")
mushroom.df1 <- mushroom.df
# Make the data look the same as what it looks like in the agaricus training dataset
mushroom.df1$A <- paste(mushroom.df$attribute, "=", mushroom.df$A, sep="")
mushroom.df1$B <- paste(mushroom.df$attribute, "=", mushroom.df$B, sep="")
mushroom.df1$C <- paste(mushroom.df$attribute, "=", mushroom.df$C, sep="")
head(mushroom.df1)
# Initialise the matrix to fit the data into. 3 rows of data for the different types of mushrooms and 126 columns for classifying variables
mushroom.matrix <- matrix(0, ncol = 126, nrow = 3)
colnames(mushroom.matrix) <- colnames(agaricus.train$data)
# If there is a match, replace 0 with a 1 in the matrix
mushroom.matrix[1, mushroom.df1$A] <- 1
mushroom.matrix[1, mushroom.df1$B] <- 1
mushroom.matrix[1, mushroom.df1$C] <- 1
# Feed the data into the model
pred2 <- predict(bst, mushroom.matrix)
pred2
df = read_csv("mushroom.test")
setwd("C:/Users/Hasnaij/Desktop/University2020/Stats369/Lab 8")
df = read_csv("mushroom.test")
View(df)
View(df)
names(agaricus.train$data)
colnames(agaricus.train$data)
dimnames(agaricus.train$data)[[2]
]
mushroom.matrix[1, mushroom.df1$mushroom_A]
df = read_csv("mushroom.test")
df$mushroom_A = paste(df$attribute, "=", df$A, sep="")
df$mushroom_B = paste(df$attribute, "=", df$B, sep="")
df$mushroom_C = paste(df$attribute, "=", df$C, sep="")
mushroom.matrix = matrix(0, ncol = 126, nrow = 3)
colnames(mushroom.matrix) = dimnames(agaricus.train$data)[[2]]
# If there is a match, replace 0 with a 1 in the matrix
mushroom.matrix[1, mushroom.df1$mushroom_A] = 1
mushroom.matrix[1, mushroom.df1$mushroom_B] = 1
mushroom.matrix[1, mushroom.df1$mushroom_C] = 1
# Feed the data into the model
pred2 = predict(bst, mushroom.matrix)
pred2
df = read_csv("mushroom.test")
df$mushroom_A = paste(df$attribute, "=", df$A, sep="")
df$mushroom_B = paste(df$attribute, "=", df$B, sep="")
df$mushroom_C = paste(df$attribute, "=", df$C, sep="")
mushroom.matrix = matrix(0, ncol = 126, nrow = 3)
colnames(mushroom.matrix) = dimnames(agaricus.train$data)[[2]]
# If there is a match, replace 0 with a 1 in the matrix
mushroom.matrix[1, df$mushroom_A] = 1
mushroom.matrix[1, df$mushroom_B] = 1
mushroom.matrix[1, df$mushroom_C] = 1
# Feed the data into the model
pred2 = predict(bst, mushroom.matrix)
pred2
df$mushroom_A
mushroom.matrix
df = read_csv("mushroom.test")
df$mushroom_A = paste(df$attribute, "=", df$A, sep="")
df$mushroom_B = paste(df$attribute, "=", df$B, sep="")
df$mushroom_C = paste(df$attribute, "=", df$C, sep="")
mushroom.matrix = matrix(0, ncol = 126, nrow = 3)
colnames(mushroom.matrix) = dimnames(agaricus.train$data)[[2]]
# # If there is a match, replace 0 with a 1 in the matrix
# mushroom.matrix[1, df$mushroom_A] = 1
# mushroom.matrix[1, df$mushroom_B] = 1
# mushroom.matrix[1, df$mushroom_C] = 1
#
# # Feed the data into the model
# pred2 = predict(bst, mushroom.matrix)
# pred2
View(mushroom.matrix)
View(mushroom.matrix)
df$mushroom_A
df$mushroom_B
#import mushroom properties
df = read_csv("mushroom.test")
df$mushroom_A = paste(df$attribute, "=", df$A, sep="")
df$mushroom_B = paste(df$attribute, "=", df$B, sep="")
df$mushroom_C = paste(df$attribute, "=", df$C, sep="")
#create mushroom matrix
mushroom.matrix = matrix(0, ncol = 126, nrow = 3)
colnames(mushroom.matrix) = dimnames(agaricus.train$data)[[2]]
mushroom.matrix[1, df$mushroom_A] = 1
mushroom.matrix[2, df$mushroom_B] = 1
mushroom.matrix[3, df$mushroom_C] = 1
# Feed the data into the model
pred2 = predict(bst, mushroom.matrix)
pred2
#import mushroom properties
df = read_csv("mushroom.test")
df$mushroom_A = paste(df$attribute, "=", df$A, sep="")
df$mushroom_B = paste(df$attribute, "=", df$B, sep="")
df$mushroom_C = paste(df$attribute, "=", df$C, sep="")
#create mushroom matrix
mushroom.matrix = matrix(0, ncol = 126, nrow = 3)
colnames(mushroom.matrix) = dimnames(agaricus.train$data)[[2]]
mushroom.matrix[1, df$mushroom_A] = 1
mushroom.matrix[2, df$mushroom_B] = 1
mushroom.matrix[3, df$mushroom_C] = 1
pred = predict(bst, mushroom.matrix)
pred
knitr::opts_chunk$set(echo = TRUE)
library(xgboost)
library(tidyverse)
data(agaricus.train, package='xgboost')
data(agaricus.test, package='xgboost')
bst = xgboost(data = agaricus.train$data, label = agaricus.train$label,
max_depth = 2, eta = 1, nthread = 2, nrounds = 2,
objective = "binary:logistic")
pred = predict(bst, agaricus.test$data)
pred[pred<0.5] = 0
pred[pred>0.5] = 1
acc = sum(pred == agaricus.test$label)/length(pred)
xgb.plot.tree(feature_names = colnames(agaricus.train$data), model = bst)
xgb.cv(data = agaricus.train$data, label = agaricus.train$label, num_class=2, nfold=10, nrounds=15)
adjusted_bst = xgboost(data = agaricus.train$data, label = agaricus.train$label,
max_depth = 2, eta = 1,nthread = 2, nrounds = 10,
objective = "binary:logistic")
xgb.plot.tree(feature_names = colnames(agaricus.train$data), model = adjusted_bst)
adj_pred = predict(adjusted_bst, agaricus.test$data)
adj_pred[adj_pred<0.5] = 0
adj_pred[adj_pred>0.5] = 1
adj_acc = sum(adj_pred == agaricus.test$label)/length(adj_pred)
#import mushroom properties
df = read_csv("mushroom.test")
df$mushroom_A = paste(df$attribute, "=", df$A, sep="")
df$mushroom_B = paste(df$attribute, "=", df$B, sep="")
df$mushroom_C = paste(df$attribute, "=", df$C, sep="")
#create mushroom matrix
mushroom.matrix = matrix(0, ncol = 126, nrow = 3)
colnames(mushroom.matrix) = dimnames(agaricus.train$data)[[2]]
mushroom.matrix[1, df$mushroom_A] = 1
mushroom.matrix[2, df$mushroom_B] = 1
mushroom.matrix[3, df$mushroom_C] = 1
pred = predict(bst, mushroom.matrix)
pred
knitr::opts_chunk$set(echo = TRUE)
library(xgboost)
library(tidyverse)
set.seed(369)
data(agaricus.train, package='xgboost')
data(agaricus.test, package='xgboost')
bst = xgboost(data = agaricus.train$data, label = agaricus.train$label,
max_depth = 2, eta = 1, nthread = 2, nrounds = 2,
objective = "binary:logistic")
pred = predict(bst, agaricus.test$data)
pred[pred<0.5] = 0
pred[pred>0.5] = 1
acc = sum(pred == agaricus.test$label)/length(pred)
xgb.plot.tree(feature_names = colnames(agaricus.train$data), model = bst)
xgb.cv(data = agaricus.train$data, label = agaricus.train$label, num_class=2, nfold=10, nrounds=15)
adjusted_bst = xgboost(data = agaricus.train$data, label = agaricus.train$label,
max_depth = 2, eta = 1,nthread = 2, nrounds = 10,
objective = "binary:logistic")
xgb.plot.tree(feature_names = colnames(agaricus.train$data), model = adjusted_bst)
adj_pred = predict(adjusted_bst, agaricus.test$data)
adj_pred[adj_pred<0.5] = 0
adj_pred[adj_pred>0.5] = 1
adj_acc = sum(adj_pred == agaricus.test$label)/length(adj_pred)
#import mushroom properties
df = read_csv("mushroom.test")
df$mushroom_A = paste(df$attribute, "=", df$A, sep="")
df$mushroom_B = paste(df$attribute, "=", df$B, sep="")
df$mushroom_C = paste(df$attribute, "=", df$C, sep="")
#create mushroom matrix
mushroom.matrix = matrix(0, ncol = 126, nrow = 3)
colnames(mushroom.matrix) = dimnames(agaricus.train$data)[[2]]
mushroom.matrix[1, df$mushroom_A] = 1
mushroom.matrix[2, df$mushroom_B] = 1
mushroom.matrix[3, df$mushroom_C] = 1
pred = predict(bst, mushroom.matrix)
pred
adjusted_bst = bst = xgboost(data = agaricus.train$data, label = agaricus.train$label,
max_depth = 2, eta = 1, nthread = 2, nrounds = 10,
objective = "binary:logistic")
xgb.plot.tree(feature_names = colnames(agaricus.train$data), model = adjusted_bst)
adj_pred = predict(adjusted_bst, agaricus.test$data)
adj_pred[adj_pred<0.5] = 0
adj_pred[adj_pred>0.5] = 1
adj_acc = sum(adj_pred == agaricus.test$label)/length(adj_pred)
adjusted_bst = xgboost(data = agaricus.train$data, label = agaricus.train$label,
max_depth = 2, eta = 1, nthread = 2, nrounds = 10,
objective = "binary:logistic")
xgb.plot.tree(feature_names = colnames(agaricus.train$data), model = adjusted_bst)
adj_pred = predict(adjusted_bst, agaricus.test$data)
adj_pred[adj_pred<0.5] = 0
adj_pred[adj_pred>0.5] = 1
adj_acc = sum(adj_pred == agaricus.test$label)/length(adj_pred)
pred = predict(bst, agaricus.test$data)
pred[pred<0.5] = 0
pred[pred>0.5] = 1
acc = sum(pred == agaricus.test$label)/length(pred)
acc
adjusted_bst = xgboost(data = agaricus.train$data, label = agaricus.train$label,
max_depth = 2, eta = 1, nthread = 2, nrounds = 10,
objective = "binary:logistic")
xgb.plot.tree(feature_names = colnames(agaricus.train$data), model = adjusted_bst)
adj_pred = predict(adjusted_bst, agaricus.test$data)
adj_pred[adj_pred<0.5] = 0
adj_pred[adj_pred>0.5] = 1
adj_acc = sum(adj_pred == agaricus.test$label)/length(adj_pred)
adj_acc
